#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the adjacency list
typedef struct ListNode {
    int dest;
    struct ListNode* next;
} ListNode;

// Structure for the adjacency list
typedef struct {
    ListNode* head;
} List;

// Structure for the graph
typedef struct {
    int numVertices;
    List* array;
} Graph;

// Function to create a new adjacency list node
ListNode* createListNode(int dest) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with a given number of vertices
Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    if (graph == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    graph->numVertices = numVertices;

    // Create an array of adjacency lists
    graph->array = (List*)malloc(numVertices * sizeof(List));
    if (graph->array == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }

    // Initialize each adjacency list as empty
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    ListNode* newNode = createListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since graph is undirected, add an edge from dest to src as well
    newNode = createListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to display the ordering of vertices in the graph
void displayGraphOrdering(Graph* graph) {
    printf("Ordering of vertices in the graph:\n");
    for (int i = 0; i < graph->numVertices; ++i) {
        ListNode* temp = graph->array[i].head;
        printf("Vertex %d -> ", i);
        while (temp != NULL) {
            printf("%d ", temp->dest);
            temp = temp->next;
        }
        printf("\n");
    }
}

// Main function
int main() {
    int numVertices = 5;
    Graph* graph = createGraph(numVertices);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    displayGraphOrdering(graph);

    return 0;
}
