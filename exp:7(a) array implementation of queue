#include <stdio.h>
#include <stdlib.h>
#define MAX 100

typedef struct {
    int items[MAX];
    int front, rear;
} QueueArray;

// Initialize the queue
void initQueueArray(QueueArray *q) {
    q->front = -1;
    q->rear = -1;
}

// Check if the queue is full
int isFullArray(QueueArray *q) {
    return q->rear == MAX - 1;
}

// Check if the queue is empty
int isEmptyArray(QueueArray *q) {
    return q->front == -1 || q->front > q->rear;
}

// Enqueue an element into the queue
void enqueueArray(QueueArray *q, int value) {
    if (isFullArray(q)) {
        printf("Queue is full\n");
        return;
    }
    if (q->front == -1) {
        q->front = 0;
    }
    q->items[++(q->rear)] = value;
}

// Dequeue an element from the queue
int dequeueArray(QueueArray *q) {
    if (isEmptyArray(q)) {
        printf("Queue is empty\n");
        return -1;
    }
    return q->items[(q->front)++];
}

// Display the elements in the queue
void displayArray(QueueArray *q) {
    if (isEmptyArray(q)) {
        printf("Queue is empty\n");
        return;
    }
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
    printf("\n");
}

// Main function to demonstrate queue operations using array
int main() {
    QueueArray queue;
    initQueueArray(&queue);

    enqueueArray(&queue, 10);
    enqueueArray(&queue, 20);
    enqueueArray(&queue, 30);

    printf("Queue elements: ");
    displayArray(&queue);

    printf("Dequeued element: %d\n", dequeueArray(&queue));
    printf("Queue elements after dequeue: ");
    displayArray(&queue);

    return 0;
}
