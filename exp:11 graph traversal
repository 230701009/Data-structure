#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the adjacency list
typedef struct ListNode {
    int dest;
    struct ListNode* next;
} ListNode;

// Structure for the adjacency list
typedef struct {
    ListNode* head;
} List;

// Structure for the graph
typedef struct {
    int numVertices;
    List* array;
} Graph;

// Function to create a new adjacency list node
ListNode* createListNode(int dest) {
    ListNode* newNode = (ListNode*)malloc(sizeof(ListNode));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with a given number of vertices
Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    if (graph == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    graph->numVertices = numVertices;

    // Create an array of adjacency lists
    graph->array = (List*)malloc(numVertices * sizeof(List));
    if (graph->array == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }

    // Initialize each adjacency list as empty
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    ListNode* newNode = createListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since graph is undirected, add an edge from dest to src as well
    newNode = createListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to perform Breadth First Search (BFS)
void BFS(Graph* graph, int startVertex) {
    // Create a boolean array to keep track of visited vertices
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));
    if (visited == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    for (int i = 0; i < graph->numVertices; ++i) {
        visited[i] = 0;
    }

    // Create a queue for BFS
    int* queue = (int*)malloc(graph->numVertices * sizeof(int));
    if (queue == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    int front = 0, rear = 0;

    // Mark the current node as visited and enqueue it
    visited[startVertex] = 1;
    queue[rear++] = startVertex;

    while (front < rear) {
        // Dequeue a vertex from queue and print it
        int currentVertex = queue[front++];
        printf("%d ", currentVertex);

        // Get all adjacent vertices of the dequeued vertex currentVertex
        // If an adjacent vertex has not been visited, then mark it visited and enqueue it
        ListNode* temp = graph->array[currentVertex].head;
        while (temp != NULL) {
            int adjVertex = temp->dest;
            if (!visited[adjVertex]) {
                visited[adjVertex] = 1;
                queue[rear++] = adjVertex;
            }
            temp = temp->next;
        }
    }

    free(visited);
    free(queue);
}

// Function to perform Depth First Search (DFS) recursive helper function
void DFSUtil(Graph* graph, int currentVertex, int* visited) {
    // Mark the current node as visited and print it
    visited[currentVertex] = 1;
    printf("%d ", currentVertex);

    // Recur for all the vertices adjacent to this vertex
    ListNode* temp = graph->array[currentVertex].head;
    while (temp != NULL) {
        int adjVertex = temp->dest;
        if (!visited[adjVertex]) {
            DFSUtil(graph, adjVertex, visited);
        }
        temp = temp->next;
    }
}

// Function to perform Depth First Search (DFS)
void DFS(Graph* graph, int startVertex) {
    // Create a boolean array to keep track of visited vertices
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));
    if (visited == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    for (int i = 0; i < graph->numVertices; ++i) {
        visited[i] = 0;
    }

    // Call the recursive helper function to print DFS traversal
    DFSUtil(graph, startVertex, visited);

    free(visited);
}

// Main function to demonstrate BFS and DFS
int main() {
    int numVertices = 5;
    Graph* graph = createGraph(numVertices);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printf("Breadth First Search (BFS) starting from vertex 0: ");
    BFS(graph, 0);
    printf("\n");

    printf("Depth First Search (DFS) starting from vertex 0: ");
    DFS(graph, 0);
    printf("\n");

    return 0;
}
