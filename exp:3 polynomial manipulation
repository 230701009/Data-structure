#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the singly linked list
typedef struct Node {
    int coeff;
    int exp;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int coeff, int exp) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->coeff = coeff;
    newNode->exp = exp;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void insertNode(Node** head, int coeff, int exp) {
    Node* newNode = createNode(coeff, exp);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Function to display the polynomial
void displayPoly(Node* head) {
    Node* temp = head;
    while (temp != NULL) {
        printf("%d*x^%d", temp->coeff, temp->exp);
        temp = temp->next;
        if (temp != NULL)
            printf(" + ");
    }
    printf("\n");
}

// Function to add two polynomials
Node* addPolynomials(Node* poly1, Node* poly2) {
    Node* result = NULL;
    Node* temp1 = poly1;
    Node* temp2 = poly2;

    while (temp1 != NULL && temp2 != NULL) {
        if (temp1->exp > temp2->exp) {
            insertNode(&result, temp1->coeff, temp1->exp);
            temp1 = temp1->next;
        } else if (temp1->exp < temp2->exp) {
            insertNode(&result, temp2->coeff, temp2->exp);
            temp2 = temp2->next;
        } else {
            insertNode(&result, temp1->coeff + temp2->coeff, temp1->exp);
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
    }

    while (temp1 != NULL) {
        insertNode(&result, temp1->coeff, temp1->exp);
        temp1 = temp1->next;
    }

    while (temp2 != NULL) {
        insertNode(&result, temp2->coeff, temp2->exp);
        temp2 = temp2->next;
    }

    return result;
}

// Function to subtract two polynomials
Node* subtractPolynomials(Node* poly1, Node* poly2) {
    Node* result = NULL;
    Node* temp1 = poly1;
    Node* temp2 = poly2;

    while (temp1 != NULL && temp2 != NULL) {
        if (temp1->exp > temp2->exp) {
            insertNode(&result, temp1->coeff, temp1->exp);
            temp1 = temp1->next;
        } else if (temp1->exp < temp2->exp) {
            insertNode(&result, -temp2->coeff, temp2->exp);
            temp2 = temp2->next;
        } else {
            insertNode(&result, temp1->coeff - temp2->coeff, temp1->exp);
            temp1 = temp1->next;
            temp2 = temp2->next;
        }
    }

    while (temp1 != NULL) {
        insertNode(&result, temp1->coeff, temp1->exp);
        temp1 = temp1->next;
    }

    while (temp2 != NULL) {
        insertNode(&result, -temp2->coeff, temp2->exp);
        temp2 = temp2->next;
    }

    return result;
}

// Function to multiply two polynomials
Node* multiplyPolynomials(Node* poly1, Node* poly2) {
    Node* result = NULL;
    Node* temp1 = poly1;
    Node* temp2 = poly2;

    while (temp1 != NULL) {
        temp2 = poly2;
        while (temp2 != NULL) {
            int coeff = temp1->coeff * temp2->coeff;
            int exp = temp1->exp + temp2->exp;
            Node* temp = result;
            Node* prev = NULL;
            while (temp != NULL && temp->exp > exp) {
                prev = temp;
                temp = temp->next;
            }
            if (temp != NULL && temp->exp == exp) {
                temp->coeff += coeff;
            } else {
                Node* newNode = createNode(coeff, exp);
                newNode->next = temp;
                if (prev == NULL) {
                    result = newNode;
                } else {
                    prev->next = newNode;
                }
            }
            temp2 = temp2->next;
        }
        temp1 = temp1->next;
    }

    return result;
}

// Main function to demonstrate polynomial operations
int main() {
    Node* poly1 = NULL;
    Node* poly2 = NULL;

    // Polynomial 1: 3x^3 + 2x^2 + 5
    insertNode(&poly1, 3, 3);
    insertNode(&poly1, 2, 2);
    insertNode(&poly1, 5, 0);

    // Polynomial 2: 4x^2 + 2x + 1
    insertNode(&poly2, 4, 2);
    insertNode(&poly2, 2, 1);
    insertNode(&poly2, 1, 0);

    printf("Polynomial 1: ");
    displayPoly(poly1);

    printf("Polynomial 2: ");
    displayPoly(poly2);

    // Polynomial Addition
    Node* sum = addPolynomials(poly1, poly2);
    printf("Sum: ");
    displayPoly(sum);

    // Polynomial Subtraction
    Node* difference = subtractPolynomials(poly1, poly2);
    printf("Difference: ");
    displayPoly(difference);

    // Polynomial Multiplication
    Node* product = multiplyPolynomials(poly1, poly2);
    printf("Product: ");
    displayPoly(product);

    return 0;
}
