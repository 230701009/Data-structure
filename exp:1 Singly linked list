#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
typedef struct Node {
    int data;
    struct Node *next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node newNode = (Node)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Insert a node at the beginning of the list
void insertAtBeginning(Node **head, int data) {
    Node *newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Insert a node after a given node P
void insertAfter(Node *prevNode, int data) {
    if (prevNode == NULL) {
        printf("The given previous node cannot be NULL\n");
        return;
    }
    Node *newNode = createNode(data);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}

// Insert a node at the end of the list
void insertAtEnd(Node **head, int data) {
    Node *newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    Node *temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

// Find an element in the list
Node* findElement(Node *head, int data) {
    Node *temp = head;
    while (temp != NULL) {
        if (temp->data == data)
            return temp;
        temp = temp->next;
    }
    return NULL;
}

// Find the next element in the list
Node* findNext(Node *node) {
    if (node != NULL)
        return node->next;
    return NULL;
}

// Find the previous element in the list
Node* findPrevious(Node *head, Node *node) {
    if (head == NULL || node == NULL || head == node)
        return NULL;
    Node *temp = head;
    while (temp != NULL && temp->next != node) {
        temp = temp->next;
    }
    return temp;
}

// Check if a node is the last element in the list
int isLast(Node *node) {
    return node != NULL && node->next == NULL;
}

// Check if the list is empty
int isEmpty(Node *head) {
    return head == NULL;
}

// Delete the node at the beginning of the list
void deleteAtBeginning(Node **head) {
    if (*head == NULL)
        return;
    Node *temp = *head;
    *head = (*head)->next;
    free(temp);
}

// Delete the node after a given node P
void deleteAfter(Node *prevNode) {
    if (prevNode == NULL || prevNode->next == NULL)
        return;
    Node *temp = prevNode->next;
    prevNode->next = temp->next;
    free(temp);
}

// Delete the node at the end of the list
void deleteAtEnd(Node **head) {
    if (*head == NULL)
        return;
    if ((*head)->next == NULL) {
        free(*head);
        *head = NULL;
        return;
    }
    Node *temp = *head;
    while (temp->next->next != NULL) {
        temp = temp->next;
    }
    free(temp->next);
    temp->next = NULL;
}

// Delete the entire list
void deleteList(Node **head) {
    Node *current = *head;
    Node *nextNode;
    while (current != NULL) {
        nextNode = current->next;
        free(current);
        current = nextNode;
    }
    *head = NULL;
}

// Utility function to print the list
void printList(Node *head) {
    Node *temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function to demonstrate the operations
int main() {
    Node *head = NULL;

    insertAtBeginning(&head, 10);
    insertAtBeginning(&head, 20);
    insertAtEnd(&head, 30);
    insertAtEnd(&head, 40);
    insertAfter(head, 25); // Insert 25 after the first node

    printf("Linked List: ");
    printList(head);

    Node *foundNode = findElement(head, 30);
    if (foundNode != NULL)
        printf("Element 30 found\n");
    else
        printf("Element 30 not found\n");

    Node *nextNode = findNext(head);
    if (nextNode != NULL)
        printf("Next element after head: %d\n", nextNode->data);

    Node *prevNode = findPrevious(head, head->next->next);
    if (prevNode != NULL)
        printf("Previous element before 25: %d\n", prevNode->data);

    if (isLast(head->next->next->next->next))
        printf("Element 40 is the last element\n");

    if (isEmpty(head))
        printf("List is empty\n");
    else
        printf("List is not empty\n");

    deleteAtBeginning(&head);
    printf("After deleting beginning node: ");
    printList(head);

    deleteAfter(head);
    printf("After deleting node after head: ");
    printList(head);

    deleteAtEnd(&head);
    printf("After deleting end node: ");
    printList(head);

    deleteList(&head);
    printf("After deleting the entire list: ");
    printList(head);

    return 0;
}
